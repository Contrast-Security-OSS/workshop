env.terraform_version = '0.13.5'

pipeline {
    agent any
    stages {
        stage("DEV") {
            steps {
                sh 'echo "DEV"'
                sh 'echo "checkout"'
                // ### TODO INSERT clone operation on next line
//                git branch: '1.5.4-SQLi', url: 'https://github.com/Contrast-Security-OSS/spring-petclinic.git'
                // ### TODO Switch to this branch for a fix
                git branch: '1.5.4-SQLi-fixed', url: 'https://github.com/Contrast-Security-OSS/spring-petclinic.git'
                sh 'echo "unit test"'
                sh '''
                echo "$PATH"
                echo "M2_HOME"
                mvn --version
                java -version
                '''
                // ### TODO ENABLE CREDENTIALS BLOCK ON NEXT LINE
                script {
                    withCredentials([file(credentialsId: 'contrast_security-potato-ip', variable: 'yaml')]) {
                        def contents = readFile(env.yaml)
                        writeFile file: 'contrast_security.yaml', text: "$contents"
                    }
                    sh 'cat contrast_security.yaml'
                }

                // ### TODO USE THE CONTENTS OF THE YAML FILE BELOW
                script {
                    // We're usinmg https://plugins.jenkins.io/build-user-vars-plugin/
                    wrap($class: 'BuildUser') {
                        def yaml = readYaml file: 'contrast_security.yaml'
                        echo "api_key ${yaml.api.api_key}"
                        echo "username ${yaml.api.user_name}"
                        echo "apiUrl ${yaml.api.url}"
                        echo "service key ${yaml.api.service_key}"
                        echo "org UUID ${params.orguuid}"
                        sh 'echo "build"'
                        echo "firstname ${BUILD_USER_FIRST_NAME}"
                        echo "lastname ${BUILD_USER_LAST_NAME}"
                        echo "user ${BUILD_USER}"
                        echo "email ${BUILD_USER_EMAIL}"
                        sh """
                        ### TODO INSERT EXPORT commands on next lines
                        export CONTRAST__API__URL="${yaml.api.url}"
                        export CONTRAST__API__API_KEY="${yaml.api.api_key}"
                        export CONTRAST__API__SERVICE_KEY="${yaml.api.service_key}"
                        export CONTRAST__API__USER_NAME="${yaml.api.user_name}"
                        env
                        mvn --version
                        ### TODO INSERT maven commands on next line
                        echo mvn -P contrast-maven -Dcontrast-environment=Development -Dcontrast-login-username="${BUILD_USER_EMAIL}" -Dcontrast-apiKey=${yaml.api.api_key} -Dcontrast-serviceKey=${params.service_key} -Dcontrast-apiUrl="http://host.docker.internal:28080/Contrast/api" -Dcontrast-orgUuid=${params.orguuid} -Dcontrast-first-name=${BUILD_USER_FIRST_NAME} -Dcontrast-hostname=${BUILD_USER_FIRST_NAME}-server clean  verify
                        ### TODO UNCOMMENT TO ENABLE THE BUILD
                        mvn -P contrast-maven -Dcontrast-environment=Development -Dcontrast-login-username="${BUILD_USER_EMAIL}" -Dcontrast-apiKey=${yaml.api.api_key} -Dcontrast-serviceKey=${params.service_key} -Dcontrast-apiUrl="http://host.docker.internal:28080/Contrast/api" -Dcontrast-orgUuid=${params.orguuid} -Dcontrast-first-name=${BUILD_USER_FIRST_NAME} -Dcontrast-hostname="${BUILD_USER_FIRST_NAME}-server" clean  verify
                        """
                    }
                }
            }
        }
        stage("QA") {
            steps {
                sh 'echo "QA"'
                sh "ls target"
                //### TODO GET TERRAFORM FILES BELOW
                sh """
                FILE=/usr/bin/terraform
                if [ -f "\$FILE" ]; then
                    echo "\$FILE exists, skipping download"
                else
                    echo "\$FILE does not exist"
                    cd /tmp
                    curl -o terraform.zip https://releases.hashicorp.com/terraform/'$terraform_version'/terraform_'$terraform_version'_linux_amd64.zip
                    sudo mv terraform /usr/binex
                    rm -rf terraform.zip
                fi
                """
                sh """
                echo "Setup TERRAFORM"
                terraform version
                terraform init
                echo npm i puppeteer
                """

                sh 'echo "deploy to QA"'
                sh 'echo "Run QA Tests"'
                // TODO: UNCOMMENT TO CREATE TERRAFORM INFRASTRUCTURE.
                // TODO: MAKE SURE TO ADD PARAMETERS FOR location AND INITIALS
                script {
                    withCredentials([azureServicePrincipal('ContrastAzureSponsored')]) {
                        try {
                            sh """
                            export ARM_CLIENT_ID=$AZURE_CLIENT_ID
                            export ARM_CLIENT_SECRET=$AZURE_CLIENT_SECRET
                            export ARM_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID
                            export ARM_TENANT_ID=$AZURE_TENANT_ID
                            terraform apply -auto-approve -var 'location=$location' -var 'initials=$initials' -var 'environment=qa' -var 'servername=jenkins-$initials' -var 'session_metadata="version=1.5.1"'
                            """
                        } catch (Exception e) {
                            echo "Terraform refresh failed, deleting state"
                            sh "rm -rf terraform.tfstate"
                            currentBuild.result = "FAILURE"
                            error("Aborting the build.")
                        }
                    }
                }
            }
        }
        stage("UAT") {
            // TODO: UNCOMMENT TO ASK THE USER TO CONTINUE
            input {
                message "Should we continue?"
                ok "Yes"
            }
            steps {
                // TODO: UNCOMMENT TO DELETE TERRAFORM INFRASTRUCTURE
                script {
                    withCredentials([azureServicePrincipal('ContrastAzureSponsored')]) {
                        try {
                            sh """
                            export ARM_CLIENT_ID=$AZURE_CLIENT_ID
                            export ARM_CLIENT_SECRET=$AZURE_CLIENT_SECRET
                            export ARM_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID
                            export ARM_TENANT_ID=$AZURE_TENANT_ID
                            terraform destroy -auto-approve
                            """
                        } catch (Exception e) {
                            echo "Terraform delete failed, deleting state"
                            sh "rm -rf terraform.tfstate"
                            currentBuild.result = "FAILURE"
                            error("Aborting the build.")
                        }
                    }
                }
            }
        }
        stage("PRE-PROD") {
            steps {
                sh 'echo "deploy to PRE-PROD"'
            }
        }
        stage("PROD") {
            steps {
                sh 'echo "deploy to PROD"'
                sh 'echo "Re-configure Load Balancers"'
                sh 'echo "Verify B"'
                sh 'echo "Drain A"'
            }
        }
        stage("OPERATE") {
            steps {
                sh 'echo "Update SIEM"'
                sh 'echo "Update AppMonitoring"'
            }
        }
    }
}
